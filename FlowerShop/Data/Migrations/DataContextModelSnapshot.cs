// <auto-generated />
using System;
using FlowerShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlowerShop.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlowerShop.Models.Complaint", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ComplaintText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("FlowerShop.Models.Delivery", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryOptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("FlowerShop.Models.Discount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActiveUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountAmmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("MerchandiseID")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MerchandiseID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("FlowerShop.Models.Item", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CountryOfOrigin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfManufacture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MerchandiseID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("MerchandiseID");

                    b.HasIndex("OrderID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FlowerShop.Models.Merchandise", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.ToTable("Merchandises");
                });

            modelBuilder.Entity("FlowerShop.Models.MerchandiseCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MerchandiseID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentCategoryID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("MerchandiseID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("MerchandiseCategories");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeliveryID")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderStatusString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("OrderStatus");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogText")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderLogs");
                });

            modelBuilder.Entity("FlowerShop.Models.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentStatusString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PaymentStatus");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FlowerShop.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DiscountID")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserTypeID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlowerShop.Models.UserPermission", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PermissionDescription")
                        .HasColumnType("text");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("FlowerShop.Models.UserType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserPermissionsID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("UserPermissionsID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("FlowerShop.Models.Complaint", b =>
                {
                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowerShop.Models.Discount", b =>
                {
                    b.HasOne("FlowerShop.Models.Merchandise", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchandise");
                });

            modelBuilder.Entity("FlowerShop.Models.Item", b =>
                {
                    b.HasOne("FlowerShop.Models.Merchandise", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchandise");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.Models.MerchandiseCategory", b =>
                {
                    b.HasOne("FlowerShop.Models.Merchandise", null)
                        .WithMany("Categories")
                        .HasForeignKey("MerchandiseID");

                    b.HasOne("FlowerShop.Models.MerchandiseCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.HasOne("FlowerShop.Models.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowerShop.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlowerShop.Models.OrderLog", b =>
                {
                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.Models.Payment", b =>
                {
                    b.HasOne("FlowerShop.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.Models.User", b =>
                {
                    b.HasOne("FlowerShop.Models.Discount", null)
                        .WithMany("ApplicableUsers")
                        .HasForeignKey("DiscountID");

                    b.HasOne("FlowerShop.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("FlowerShop.Models.UserType", b =>
                {
                    b.HasOne("FlowerShop.Models.UserPermission", "UserPermissions")
                        .WithMany()
                        .HasForeignKey("UserPermissionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("FlowerShop.Models.Discount", b =>
                {
                    b.Navigation("ApplicableUsers");
                });

            modelBuilder.Entity("FlowerShop.Models.Merchandise", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FlowerShop.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
